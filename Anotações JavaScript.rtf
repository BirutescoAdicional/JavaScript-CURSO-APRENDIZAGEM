{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red155\green0\blue211;\red128\green100\blue162;\red0\green176\blue80;\red192\green80\blue77;\red0\green0\blue0;\red0\green77\blue187;\red255\green0\blue0;\red116\green31\blue31;\red0\green64\blue128;\red100\green107\blue134;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\cf1\f0\fs40\lang22\par
ANOTA\'c7\'d5ES para JAVASCRIPT \cf0\fs22\par

\pard\sa200\sl276\slmult1 -A tag \cf2 <script> \cf0 e \cf2 </script> \cf0 s\'e3o containers que se bota todos os comandos relacionados a JavaScript. \par
(ATEN\'c7\'c3O!: P\'f4r essa tag antes do corpo do site terminar.) \par
-O sinal de '=' em JavaScript tem o mesmo significado de "receber". \par
-No JavaScript pode ser usadas tr\'eas tipos de aspas: "Aspas duplas", 'Ap\'f3strofo vulgo aspas simples' e `Crase`. \par
- O sinal de '+' no JavaScript tem a fun\'e7\'e3o de concatena\'e7\'e3o. \par
\par

\pard\sa200\sl276\slmult1\qc\fs32 M\'f3dulo A \fs22\par

\pard\sa200\sl276\slmult1\fs28 COMANDOS AULA 04 \fs22\par
\cf2 window.alert('')       \cf3 // Aparece um pop-up ao topo do site com algo escrito. \cf0\par
\cf2 window.confirm('') \cf3 // Aparece um pop-up de confirmar ou cancelar. \cf0\par
\cf2 window.prompt('') \cf3 // Aparece um pop-up com uma caixa de texto para o cliente escrever. \cf0\par
\par

\pard\sa200\sl276\slmult1\qc\fs32 M\'f3dulo B \fs22\par

\pard\sa200\sl276\slmult1 Os coment\'e1rios feitos por \cf3 //\cf0  funcionam apenas dentro da tag \cf2 <script> \cf0\par
Coment\'e1rios fora da tag \cf2 <script> \cf0 s\'e3o feitos por \cf3 <!--\cf0  e \cf3 --> \cf0\par
E coment\'e1rios feitos na tag \cf2 <style> \cf0 s\'e3o feitos por \cf3 /**/ \cf0\par
\par
\fs28 VARI\'c1VEIS\fs22  \par
Vari\'e1veis servem para guardar dados para que eles possam ser armazenados no algoritmo. \par
Os nomes que s\'e3o dadas a essas vari\'e1veis s\'e3o chamadas de identificadores. \par
Essas vari\'e1veis podem come\'e7ar com letras (Exemplos: a1, a2, a3), podem come\'e7ar tamb\'e9m  \par
com cifr\'f5es (Exemplo: $1, $2, $3), ou tamb\'e9m podem come\'e7ar com sublinhados (Exemplos: _1, _2, _3).  \par
\par
\cf4 -Esses nomes dados as vari\'e1veis n\'e3o podem come\'e7ar com n\'fameros \par
-Pode usar letras e n\'fameros; \par
-Pode-se usar acentos e s\'edmbolos; \par
-N\'e3o se pode p\'f4r espa\'e7os; \par
-N\'e3o podem ser palavras usadas nos JavaScript. (Exemplo: function, alert, var) \par
\cf0\par
Toda vari\'e1vel que recebe o valor "null", ela vai se tornar nula.  \par
Portanto se j\'e1 cont\'e9m algum valor nessa vari\'e1vel, esse valor ser\'e1 retirado ap\'f3s ser recebida com o valor null. \par
\fs28 Dicas de vari\'e1veis: \fs22\par
\cf4 -Mai\'fasculas e min\'fasculas fazem diferen\'e7a; \par
-Escolher nomes coerentes para as vari\'e1veis; \par
-Evitar se tornar um 'programador alfabeto' ou 'programador contador'; \par
\cf0\par
Nas vari\'e1veis, caso for um n\'famero inteiro ou n\'fameros reais (float) o nome da vari\'e1vel que foi posta, o JavaScript considera como o tipo 'number'. O JavaScript tamb\'e9m cont\'e9m o tipo 'string', que s\'e3o  cadeias de car\'e1cteres (letras, n\'fameros, s\'edmbolos), ou podem ser um conjunto de n\'fameros posta no nome  da vari\'e1vel. Tamb\'e9m h\'e1 o tipo 'boolean' que possui apenas 'true' e 'false' como vari\'e1vel.\par
No JavaScript possui tipos especiais desses tipos primitivos, como por exemplo: Valores internos do tipo 'number' (Infinity e NaN), tamb\'e9m h\'e1 os tipos null, undefined, object (que possui o tipo interno Array) e tamb\'e9m h\'e1 function. Para descobrir qual o tipo de tal vari\'e1vel, basta apenas digitar 'typeof'.  \par
Existe duas maneiras poss\'edveis de converter essas vari\'e1veis para o tipo number, a primeira \'e9 usando o comando: \cf3 '\cf2 Number.parseInt()\cf0 ',  que converte para n\'fameros inteiros. \par
A outra maneira \'e9 usando esse comando: '\cf2 Number.parseFloat()', \cf0 que converte strings para n\'fameros reais. \par
Por\'e9m, \'e9 poss\'edvel simplificar usando apenas o comando: '\cf2 Number()\cf0 ', que consegue identificar n\'fameros inteiros e reais. \par
A mesma coisa existe para converter vari\'e1veis para o tipo string, usando o comando: '\cf2 String()\cf0 '. \par
Existe tamb\'e9m o comando: \cf5 '\cf2 n.toString()\cf5 '\cf2  \cf0 , que converte especificamente numbers para strings. \par
H\'e1 duas maneiras de demonstrar uma vari\'e1vel em frases. A primeira \'e9 usando a concatena\'e7\'e3o. Exemplo: \par
\cf6 var s = 'JavaScript' \par
'Estou aprendendo' + s \cf3 // Estou aprendendo JavaScript \cf0\par
A segunda maneira e a que \'e9 mais utilizada, usa um placeholder para demonstrar uma vari\'e1vel. Exemplo: \par
\cf6 var s = 'JavaScript' \par
`Estou aprendendo $\{s\}` \cf3 // Estou aprendendo JavaScript \cf0\par
O uso dessa maneira chamada template string s\'f3 \'e9 funcional caso a frase esteja entre crases. \par
Converter um tipo de moeda para outro tipo de moeda: \par
\cf2 var.toLocaleString('pa\'eds da moeda', \{style: 'currency', currency :'o tipo da moeda'\}) \par
\cf5\ul\b ___________________________________________________________________________\cf2\ulnone\b0\par
\cf0\fs30 Operadores:\par
\fs22 Existem v\'e1rios tipos de operadores no JavaScript, mas os principais s\'e3o:\par
\cf4 - Operadores Aritm\'e9ticos\par
- Operadores de Atribui\'e7\'e3o\par
- Operadores Relacionais\par
- Operadores L\'f3gicos \par
- Operadores Tern\'e1rios\par
\fs30\par
\cf0 OPERADORES ARITM\'c9TICOS \par
\fs22 Nos operadores aritm\'e9ticos tem os seguintes operadores: \par
\cf4 - Adi\'e7\'e3o '+' \par
- Subtra\'e7\'e3o '-' \par
- Multiplica\'e7\'e3o '*' \par
- Divis\'e3o Real '/' \par
- Divis\'e3o Inteira '%' (O n\'famero que sobrar fica como resultado na divis\'e3o inteira) \par
- Pot\'eancia '**'  \par
\cf0\par
\cf7\fs24 CUIDADO! \cf0\fs22\par
As contas armadas sempre come\'e7ar\'e3o por Multiplica\'e7\'e3o e Divis\'e3o. \par
Para as contas come\'e7arem por adi\'e7\'e3o, ou subtra\'e7\'e3o, podem-se botar entre par\'eanteses "(conta)\rdblquote  \par
\fs24 Ordem de Preced\'eancia: \fs22\par
\cf4 - Par\'eanteses '()' \par
- Pot\'eancia '**' \par
- Multiplica\'e7\'e3o, Divis\'e3o Inteira e Real '*' '/' '%'  \par
- Soma e Subtra\'e7\'e3o '+' '-' \par
\cf0 (As ordens come\'e7am da esquerda pra direita.) \par
\par
\fs30 OPERADORES DE ATRIBUI\'c7\'c3O\fs22\par
\'c9 uma maneira de repor o n\'famero que est\'e1 dentro de uma vari\'e1vel, por exemplo: \par
\cf6 var n = 3   \cf3 //A vari\'e1vel 'n' recebe o valor '3' \par
\cf6 n = n + 5   \cf3 //A vari\'e1vel 'n' que tem o valor de '3' ir\'e1 somar com '5' \par
\cf0 Agora a vari\'e1vel recebe o valor '8' por ter somado o '3' com '5' \par
E tem como simplificar fazendo apenas: \par
\cf6 n += 3   \cf3 //A mesma conta sendo feita de forma simplificada \cf0\fs30\par
COMANDOS AULA 05  \par
\cf2\fs22 var (nome da vari\'e1vel) = (oque ela recebe) \cf0\par
\fs30 COMANDOS AULA 06 \fs22\par
\fs26 Formata\'e7\'f5es de strings: \fs22\par
\cf2 .length                    \cf3 // Informa quantos caracteres cont\'e9m na string \cf0\par
\cf2 .toUpperCase()     \cf3 // Modifica todos os caracteres da string para letras mai\'fasculas \cf0\par
\cf2 .toLowerCase()     \cf3 // Modifica todos os caracteres da string para letras min\'fasculas \cf0\par
\fs26 Formata\'e7\'f5es de numbers: \par
\cf2\fs22 .toFixed(#)      \cf3 // Aumenta uma quantidade de casas no tipo number de uma vari\'e1vel \cf0\par
\cf2 .replace('', '') \cf3 // Substituir\'e1 um caractere por outro no tipo number de uma vari\'e1vel \par
\par
\cf0\fs30 OPERADORES RELACIONAIS\par
\fs22 Nos operadores relacionais tem os seguintes operadores: \par
\cf4 - Maior '>'\par
- Menor '<'\par
- Maior ou igual '>='\par
- Menor ou igual '<='\par
- Igual (apenas nos caracteres) '=='\par
- Igual (nos tipos e caracteres) '==='\par
- Diferente '!='\par
- Nega\'e7\'e3o '!'\par
\cf5\fs26 Exemplos:\fs22\par
\cf6 pre\'e7o >= 200.50      \cf3   // O pre\'e7o \'e9 maior ou igual a 200.50?\cf5\par
\cf6 Idade < 18                \cf3  // A idade \'e9 menor que 18?\cf5\par
\cf6 curso == 'JavaScript' \cf3 // O curso \'e9 JavaScript?\cf5\par
\cf6 n1 != n2                    \cf3 // O n1 \'e9 diferente de n2?\par
\cf8\b (IMPORTANTE!: '==' d\'e1 o resultado true apenas se tiver a mesma quantidade de caractere, j\'e1 '===' s\'f3 d\'e1 true se tiver a mesma quantidade de caractere e se tiver o mesmo tipo)\par
\cf5\b0 Esses operadores n\'e3o possuem ordem de preced\'eancia. As ordens come\'e7am da esquerda para direita.\b\par
\cf0\b0\fs30 OPERADORES L\'d3GICOS\par
\fs22 Nos operadores l\'f3gicos tem os seguintes operadores: \fs30\par
\cf4\fs22 - Nega\'e7\'e3o '!'\fs30\par
\fs22 - Conjun\'e7\'e3o '&&'\par
- Disjun\'e7\'e3o '||'\par
\cf5\fs26 Explica\'e7\'e3o:\cf4\fs22\par
\cf5 O operador '!' tem o objetivo de negar qualquer valor que seja declarado nele.\par
O operador '&&' s\'f3 funcionar\'e1 se os valores declarados for todos true.\par
O operador '||' s\'f3 funcionar\'e1 se um dos valores ou mais valores declarados for true, se os demais estiverem false, funcionar\'e1 mesmo assim.\par
\fs24 Ordem de preced\'eancia:\fs22\par
A ordem de preced\'eancia desses operadores s\'e3o:\par
\cf4 - Nega\'e7\'e3o '!'\par
- Conjun\'e7\'e3o '&&'\par
- Disjun\'e7\'e3o '||'\par
\par
\cf0\fs30 OPERADORES TERN\'c1RIOS\par
\fs22 Nos operadores tern\'e1rios tem os seguintes operadores: \par
\cf4 - '?'\par
- ':'\par
\cf5 Esses operadores tern\'e1rios possuem esse nome pois eles possuem tr\'eas operandos:\par
\cf6 TESTE ? TRUE : FALSE;\par
\cf5 Exemplo:\par
\cf6 m\'e9dia >= 7.0 ? "Aprovado" : "Reprovado" \cf3 // Se a m\'e9dia for maior ou igual a 7.0, ser\'e1 aprovado, se n\'e3o for maior ou igual a 7.0 ser\'e1 reprovado;\par
\cf0 Ordem de Preced\'eancia:\cf3\par
\cf0 A ordem de preced\'eancia dos operadores s\'e3o:\par
\cf4 - Operadores Aritm\'e9ticos\par
- Operadores de Atribui\'e7\'e3o\par
- Operadores Relacionais\par
- Operadores L\'f3gicos\par
- Operadores Tern\'e1rios\par
\cf0\par

\pard\sa200\sl276\slmult1\qc\fs32 M\'d3DULO C\par

\pard\sa200\sl276\slmult1\cf5\b\fs28 DOM\b0\fs26\par
\b\fs22 DOM\b0  \'e9 uma sigla para \b Document Object Model\b0 , que \'e9 basicamente um conjunto de objetos dentro do navegador que vai dar acesso aos componentes internos do website, de forma mais clara, DOM serve para acessar o documento e os documentos que cont\'e9m nele. Sendo assim ele n\'e3o funcionar\'e1 dentro de Node js, ele s\'f3 presente quando est\'e1 sendo usado JavaScript dentro do navegador.\par
\fs26\'c1rvore DOM\fs22\par
DOM possue uma \'e1rvore que comp\'f5e todos os elementos que cont\'e9m no documento. Exemplo:\par
\cf9 window\cf5\par

\pard\ri-1800\sa200\sl276\slmult1\tx7800\tx8760\tx8880\tx9120\tx9360\tx9720\tx9960 Tudo no JavaScript est\'e1 dentro de uma janela chamada 'window'. dentro de window, possue muitos objetos, incluindo:\par

\pard\sa200\sl276\slmult1\cf9 location    document    history\cf5\fs26\par
\fs22 location que indica a localiza\'e7\'e3o (URL, p\'e1gina atual e anterior, entre outros) do site, o objeto document indica o documento atual, e history que guarda sua ida e volta, na qual ajuda a se localizar. Dentro do document possue um objeto considerado importante, chamado:\par
\cf9 html\cf5\par
no objeto html possue mais objetos como:\par
\cf9 head     body\cf5\par
head indica o corpo do site, body indica o corpo. Dentro de head e body possuem tamb\'e9m:\par
head:\par
\cf9 meta   title   link   \cf5 (entre outros)\fs26\par
\fs22 body:\par
\cf9 h1      p     div    \cf5 (entre outros)\par
E assim a \'e1rvore segue...\par
\par
Os elementos batizados de 'Child' s\'e3o elementos que ficam diretamente embaixo dos elementos acima, que s\'e3o batizados de 'Parent'.\par
\fs28 Metodos de acesso aos elementos\par
\fs22 S\'e3o formas de navegar pelos elementos da p\'e1gina. \'c9 poss\'edvel navegar pelos elementos do site pelas seguintes formas:\par
\cf4 - Por Marca;\par
- Por ID;\par
- Por Nome;\par
- Por Classe;\par
- Por Selector;\par
\par
\cf5\fs26 Por marca\cf4\fs22\par
\cf5 Comando: \cf2 getElementsByTagName()\cf5\par
\'c9 poss\'edvel pegar mais de um elemento usando esse m\'e9todo, pois v\'e1rios elementos do html possuem a mesma Tag.\par
\fs28\par
\fs26 Por ID\par
\fs22 Comando: \cf2 getElementById()\cf5\par
Esse m\'e9todo pega elementos que cont\'e9m ID, \'e9 poss\'edvel pegar apenas um elemento com ele.\par
\par
\fs26 Por Nome\par
\fs22 Comando: \cf2 getElementsByName()\cf5\par
Esse m\'e9todo pega apenas elementos que cont\'e9m nome.\fs26\par
\par
Por Classe\par
\fs22 Comando: \cf2 getElementsByClassName()\cf5\par
Esse m\'e9todo pega apenas elementos que cont\'e9m classes.\fs26\par
\par
Por Seletor\par
\fs22 Comando: \cf2 querySelector()\cf5          \cf3  //Pega apenas um elemento.\cf5\par
Comando:\cf2  querySelectorAll()  \cf5  \cf3 //Pega mais de um elemento.\cf5\par
\par
\fs30 ANOTA\'c7\'d5ES IMPORTANTES:\fs22\par
\cf3 *'innerHTML'  retorna  um conte\'fado em HTML\par
'innerText' retorna um texto normal apenas, sem formata\'e7\'f5es.*\par
\cf5\b\fs32\par
\fs28 Eventos DOM\fs32\par
\cf0\b0\fs22 Eventos \'e9 tudo aquilo que possa acontecer com qualquer elemento. Exemplo: Quando um cursor de Mouse se aproxima da \'e1rea de uma DIV, dispara um evento chamado 'mouseenter' (Evento que indica que o cursor entrou na area da div)\par
Assim que o cursor entra na \'e1rea dessa DIV, ele se movimenta dentro dessa \'e1rea que aciona v\'e1rias vezes um evento chamado 'mousemove' (Evento que indica que o cursor est\'e1 se movendo dentro dessa \'e1rea da div)\par
Ent\'e3o o cursor \'e9 pressionado dentro dessa \'e1rea da div, acionando o evento 'mousedown' (Evento que indica que o mouse est\'e1 sendo pressionando dentro da \'e1rea da div)\par
Logo o cursor solta o bot\'e3o de pressionar, disparando o evento 'mouseup' (Evento que indica que o cursor soltou o bot\'e3o de pressionar)\par
Ent\'e3o o cursor d\'e1 um click nessa \'e1rea da div, disparando um evento chamado 'click' (Evento que indica que o mouse clicou dentro dessa \'e1rea da div)\par
Logo o cursor se move para fora dessa \'e1rea da div, disparando um evento chamado 'mouseout' (Evento que indica que o cursor saiu da \'e1rea da div)\par
Existem muitos outros eventos, esses foram alguns exemplos.\par
\par
\fs28 Fun\'e7\'f5es\par
\fs22 S\'e3o conjunto de c\'f3digos, linhas de c\'f3digos que v\'e3o ser executadas quando um evento ocorrer.\par
Exemplo: 10 linhas de c\'f3digos s\'e3o postas em 1 bloco que s\'f3 v\'e3o ser ativadas se um cursor clicar nesse bloco. \par
Para que esse bloco funcione, voc\'ea precisa p\'f4r os sinais de chaves (\cf10 '\{\}'\cf0 ) e nomear esse bloco de function antes do bloco. E geralmente se p\'f5e um nome para essa fun\'e7\'e3o, que normalmente s\'e3o eventos que v\'e3o ocorrer, logo do lado desse nome ter\'e1 os sinais de par\'eanteses. Nesses par\'eanteses, por op\'e7\'e3o, pode-se botar parametros.\par
\par
\fs30 ANOTA\'c7\'d5ES IMPORTANTES:\par
\cf3\fs22 *Os eventos podem ser configurados na parte HTML ou na parte de Script*\par
*A propriedade 'value' \'e9 usada para pegar os valores atuais de elementos como '<input>' ou '<textarea>'.*\par
*Um bloco em JS s\'e3o representados como um par de chaves. (sinais de chaves: '\{\}')\par

\pard\sa200\sl276\slmult1\qc\cf0\fs32 M\'d3DULO D\par

\pard\sa200\sl276\slmult1\b\fs28 Condi\'e7\'f5es em JS:\b0\fs22\par
Em JavaScript, as condi\'e7\'f5es s\'e3o blocos de c\'f3digo que permitem que determinadas a\'e7\'f5es sejam executadas com base em avalia\'e7\'f5es l\'f3gicas (true ou false). Elas s\'e3o frequentemente usadas para controlar o fluxo do programa e tomar decis\'f5es com base em diferentes situa\'e7\'f5es. As estruturas de controle de fluxo mais comuns para implementar condi\'e7\'f5es em JavaScript s\'e3o '\cf6 if\cf0 ', '\cf6 else if\cf0 ' e '\cf6 else\cf0 '.  Exemplo: Se o cliente fazer tal coisa dentro do website, ent\'e3o quero executar o comando que estiver no bloco do '\cf6 if\cf0 '. Caso ele n\'e3o fizer tal coisa dentro do website, ent\'e3o vai executar o comando que estiver no bloco do '\cf6 else\cf0 '.\par
\fs28 Tipos de Condi\'e7\'e3o\fs22\par
Condi\'e7\'e3o Simples: Cont\'e9m apenas um bloco 'if' na estrutura. \par
Condi\'e7\'e3o Composta: Cont\'e9m dois blocos 'if' e 'else' na estrutura.\par
Condi\'e7\'f5es Aninhadas: Cont\'e9m Condi\'e7\'f5es dentro de condi\'e7\'f5es.\par
Condi\'e7\'e3o M\'faltipla: Cont\'e9m tr\'eas ou mais blocos na estrutura. Nessa condi\'e7\'e3o tem uma express\'e3o chamada switch que cont\'e9m um bloco que tem vari\'e1s condi\'e7\'f5es chamadas de case. Todo final dessas condi\'e7\'f5es cases tem a obrigatoriedade de possuir um valor 'break'.\par
\par
\fs30 ANOTA\'c7\'d5ES IMPORTANTES:\par
\fs22 *No c\'f3digo '\cf2 new Date()\cf0 ',\cf2  \cf0 ele pega o tempo que voc\'ea est\'e1 executando esse c\'f3digo.*\par
\cf3 *No JavaScript, os dias da semana s\'e3o contados por n\'fameros:\par
0 = Domingo;\par
1 = Segunda;\par
2 = Ter\'e7a;\par
3 = Quarta;\par
4 = Quinta;\par
5 = Sexta;\par
6 = S\'e1bado;*\par
\par
\cf0 As condi\'e7\'f5es que usam 'if' \'e9 mais para valores de intervalos, j\'e1 as experess\'f5es switch case \'e9 mais recomend\'e1vel para valores pontuais.\par
\par

\pard\sa200\sl276\slmult1\qc\fs32 M\'d3DULO E\fs22\par

\pard\sa200\sl276\slmult1\b\fs28 Repeti\'e7\'f5es em JS:\b0\fs22\par
H\'e1 como repetir c\'f3digos em JavaScript utilizando o comando '\cf2 while\cf0 ', sua estrutura se baseia em repetir um bloco caso a condi\'e7\'e3o ainda seja true. E tamb\'e9m existe o comando '\cf2 do while()\cf5 '\cf2  \cf0 que ir\'e1 disparar o c\'f3digo primeiro, e se caso a condi\'e7\'e3o ainda seja true, o c\'f3digo ir\'e1 se repetir.\par
Existe um outro modo que tem como comando '\cf2 for (   ;  ;  )\cf5 '.\cf2  \cf0 Ele \'e9 basicamente o comando while, por\'e9m voc\'ea pode escrever a inicializa\'e7\'e3o, a condi\'e7\'e3o, e o incremento do c\'f3digo no par\'eanteses ao lado dele.\par
\'c9 poss\'edvel simplificar essa estrutura de repeti\'e7\'e3o usando '\cf2 for ( '' in '' ) \{\}\cf0 '\par
\par

\pard\sa200\sl276\slmult1\qc\fs30 M\'d3DULO F\par

\pard\sa200\sl276\slmult1\b\fs28 Vari\'e1veis compostas:\par
\b0\fs22 Vari\'e1veis compostas s\'e3o vari\'e1veis que podem armanezar 2 ou mais dados de uma vez s\'f3, ao contr\'e1rio da v\'e1riavel simples, que s\'f3 guarda uma vari\'e1vel por vez. Todas as vari\'e1ves compostas come\'e7am com o valor 0. As vari\'e1veis compostas (ou como tamb\'e9m chamada 'Array', 'Vetor' em portugu\'eas), possui 'elementos' dentro dela. Esses elementos s\'e3o ligadas \'e0 um tipo de numera\'e7\'e3o, ou tamb\'e9m chamada '\'edndices' ou 'chaves'. E o'qu\'ea tiver dentro desses elementos s\'e3o chamadas de conte\'fado ou valor.\par
"Todo Vetor \'e9 uma vari\'e1vel que tem v\'e1rios elementos, cada elemento \'e9 composto por seu valor e por uma chave de identifica\'e7\'e3o" - Professor Gustavo Guanabara.\par
C\'f3digo: '\cf2 var num  = []\cf5 '\par
Para adicionar mais um elemento na mesma vari\'e1vel, \'e9 preciso p\'f4r um \'edndice sucessor ao \'faltimo elemento criado. Exemplo:\par
'\cf2 let num = [5, 8, 4]\cf5 ' \cf2  \cf3 // Declarando uma vari\'e1vel composta\cf5\par
\cf0 '\cf2 num[3] = 6\cf5 '\cf2               \cf3 // P\'f4ndo um novo elemento na vari\'e1vel\par
\cf5 Esse m\'e9todo serve tamb\'e9m para rep\'f4r um elemento diferente no lugar de outro.\par
Maneira mais eficiente de criar um novo \'edndice com um elemento:\par
'\cf2 array.push(\cf6 valor\cf2 )\cf5 '\par
(M\'e9todos \'fateis: Para saber a largura da vari\'e1vel basta escrever '\cf2 array.length\cf5 '\par
Para p\'f4r os elementos da v\'e1riavel em ordem crescente, apenas \'e9 preciso p\'f4r o c\'f3digo: '\cf2 array.sort()\cf5 ')\par
Para mostrar no c\'f3digo um elemento espec\'edfico da vari\'e1vel, s\'f3 escrever o c\'f3digo '\cf2 array[\'edndice do valor desejado]\cf0 '\par
\par
\b\fs28 FUN\'c7\'d5ES PARTE 2\par
\b0\fs22  Toda fun\'e7\'e3o cont\'e9m uma chamada, um conjunto de par\'e2metros, uma a\'e7\'e3o, e um retorno. Nem toda fun\'e7\'e3o tem par\'e2metro, ou retorno.\par
Fun\'e7\'f5es s\'e3o a\'e7\'f5es executadas assim que s\'e3o chamadas ou em decorr\'eancia de algum evento. Uma fun\'e7\'e3o pode receber par\'e2metros e retornar um resultado.\fs26\par
}
 